service: hakataarchiver

custom:
  defaultStage: dev
  productionOnly:
    dev: false
    production: true

provider:
  name: aws
  runtime: nodejs22.x
  memorySize: 256
  stage: ${opt:stage, self:custom.defaultStage}
  region: ap-northeast-1
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    HAKATASHI_API_KEY: ${env:HAKATASHI_API_KEY}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
        - s3:*
      Resource: '*'
  iamManagedPolicies:
    - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
    - "arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy"

build:
  esbuild:
    external:
      - aws-sdk

functions:
  crawlPixiv:
    handler: crawlers/pixiv.handler
    events:
      - schedule:
          rate: cron(17 * * * ? *)
          enabled: ${self:custom.productionOnly.${self:provider.stage}}
    timeout: 900
  crawlPoipiku:
    handler: crawlers/poipiku.handler
    events:
      - schedule:
          rate: cron(51 * * * ? *)
          enabled: ${self:custom.productionOnly.${self:provider.stage}}
    timeout: 900
  crawlFanbox:
    handler: crawlers/fanbox.handler
    events:
      - schedule:
          rate: cron(8 * * * ? *)
          enabled: ${self:custom.productionOnly.${self:provider.stage}}
    timeout: 900
    memorySize: 1024
  crawlLocalTweets:
    handler: crawlers/localTweets.handler
    events:
      - schedule:
          rate: cron(0 * * * ? *)
          enabled: ${self:custom.productionOnly.${self:provider.stage}}
    timeout: 900
    memorySize: 1024
  postSession:
    handler: lib/postSession.handler
    events:
      - http:
          method: post
          path: post-session
  postTwitterLike:
    handler: lib/postTwitterLike.handler
    events:
      - http:
          method: post
          path: post-twitter-like
  randomTwitter:
    handler: lib/random.twitter
    events:
      - http:
          method: get
          path: random/twitter
  randomPixiv:
    handler: lib/random.pixiv
    events:
      - http:
          method: get
          path: random/pixiv
  randomFanbox:
    handler: lib/random.fanbox
    events:
      - http:
          method: get
          path: random/fanbox
  fanboxGetPost:
    handler: lib/fanbox.getPost
    events:
      - http:
          method: get
          path: fanbox/getPost
  fanboxListCreators:
    handler: lib/fanbox.listCreators
    events:
      - http:
          method: get
          path: fanbox/listCreators
  fanboxGetCreatorPosts:
    handler: lib/fanbox.getCreatorPosts
    events:
      - http:
          method: get
          path: fanbox/getCreatorPosts
  getImages:
    handler: lib/root.getImages
    events:
      - http:
          method: get
          path: getImages
